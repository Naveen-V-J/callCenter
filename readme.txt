In designing the call center simulation program, I have taken a structured and thread-safe approach to ensure the accurate representation of the call center's operation. The program comprises multiple classes, each serving a distinct role, and leverages Java's concurrent utilities to synchronize the concurrent actions of threads. Below is an overview of the classes and their responsibilities:

Main class: The entry point of the program initializes and coordinates the worker and caller threads. It uses an ExecutorService to manage these threads and ensures a graceful termination when all calls have been answered.

Agent class: Represents the worker threads. Each worker chooses a call queue, answers calls in a FIFO manner, and steals the last call from another worker's queue when their queue is empty. The worker threads are synchronized using locks to ensure exclusive queue selection. A shared AtomicInteger is used by the class to keep track of the total number of calls handled by all agents collectively, ensuring that the program knows when all calls have been answered and can terminate gracefully.

Caller class: Represents the caller threads. These threads generate calls and append them to randomly selected call queues. Each caller adds calls to the call queues, simulating real-time call arrivals.

CallQueue class: Represents the call queues. It uses an ArrayBlockingQueue to store incoming calls, ensuring thread-safe access. The selectQueue method uses ReentrantLock ensures that only one worker selects a queue to prevent multiple workers from choosing the same queue. The class provides methods for adding and taking calls, checking if the queue is empty, and stealing the last call. Calls are added to the queue using the put() method, which blocks if the queue is full, ensuring synchronized and orderly addition of calls. Calls are taken from the queue using the take() method, which blocks if the queue is empty. This blocking behavior guarantees that agents cannot remove calls from an empty queue, maintaining synchronization in call handling. Furthermore. To facilitate call stealing by other agents all the current time stamp is set in added Call objects so that last call added to the queue can be retrieved by finding the Call with the largest time stamp.

Call class: Represents individual calls with unique IDs and call durations. These objects are created by caller threads and added to call queues. It also has variable named 'timeStamp' to store the time stamp of when it was added to a queue, this value is set by the CallQueue class and is used to facilitate theft of calls.